- hosts: localhost
  connection: local
  collections:
    - community.docker

  vars_files:
    - vars/main.yml
    
  vars:
    default_domain_name: 'example.com'
    #default_domain_name: 'site.test'
    db_root_password: 'root_password'
    
    ssl_csr_country_name: 'JP'
    ssl_csr_state_name: 'Osaka'
    ssl_csr_city_name: 'Example-city'
    ssl_csr_organization_name: 'Example Inc.'
    ssl_csr_common_name: '{{ default_domain_name }}'

    # Dockerホスト用ディレクトリ
    www_document_root: '/docker/share/html' # WWWドキュメントルート
  roles:
    - webofmars.dummy # for sample
    - geerlingguy.ntp

  pre_tasks:

  tasks:
    - name: install minimal command
      dnf:
        name:
          - zip
          - unzip
          - net-tools

    - name: Add Docker repository
      shell:
        cmd: 'dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'
    
    - name: Install Docker module
      dnf:
        name:
          - docker-ce
          - docker-ce-cli

    - name: Start Docker
      service:
        name: 'docker'
        state: started
        enabled: true

    - name: Install Docker compose
      shell:
        cmd: 'pip3 install docker-compose'

    #
    # MariaDB用設定ファイル作成
    #
    - name: Create MariaDB data directory
      file: path='/docker/mariadb/data' state=directory owner=root group=root mode=0755
    - name: Copy MariaDB conf file
      copy: src='./container/db/files/custom.cnf' dest='/docker/mariadb/custom.cnf' owner=root group=root mode=0644
    #
    # Nginx用設定ファイル作成
    #
    - name: Create Nginx conf directory
      file: path='/docker/nginx/conf.d' state=directory owner=root group=root mode=0755
    - name: Create multi domain site directory
      file: path='/docker/nginx/sites-available' state=directory owner=root group=root mode=0755
    - name: Copy nginx.conf
      copy: src='./container/nginx/files/nginx.conf' dest='/docker/nginx/nginx.conf' owner=root group=root mode=0644
    - name: Create default site configuration
      template: src='./container/nginx/templates/default.conf.j2' dest='/docker/nginx/conf.d/default.conf' owner=root group=root mode=0644

    #
    # PHP用設定ファイル作成
    #
    - name: Create PHP conf directory
      file: path='/docker/php' state=directory owner=root group=root mode=0755
    - name: Copy php.ini
      copy: src='./container/php/files/php.ini' dest='/docker/php/php.ini' owner=root group=root mode=0644
    - name: Create PHP-FPM conf directory
      file: path='/docker/php/php-fpm.d' state=directory owner=root group=root mode=0755
    - name: Create PHP-FPM configuration
      template: src='./container/php/templates/www.conf.j2' dest='/docker/php/php-fpm.d/www.conf' owner=root group=root mode=0644

    #
    # WWW共通ディレクトリ作成
    #
    - name: Create www directory
      file: path='{{ www_document_root }}' state=directory owner=root group=root mode=0755

    #
    # ネットワーク作成
    #
    - name: Create a network
      docker_network:
        name: local-network

    #
    # MariaDBコンテナ作成
    #
    - name: Build MariaDB image and push
      docker_image:
        name: local/db
        build:
          path: './container/db/build'
        source: build

    - name: Create MariaDB container
      docker_container:
        name: db
        image: local/db
        recreate: yes
        state: started
        restart_policy: always
        ports: 3306:3306
        networks:
          - name: local-network
        env:
          MARIADB_ROOT_PASSWORD: '{{ db_root_password }}'
          MARIADB_USER: 'my_user'
          MARIADB_PASSWORD: 'my_password'
          MARIADB_DATABASE: 'my_database'
          MARIADB_ROOT_HOST: '%'
        log_driver: journald
        log_options:
          tag: "{{ '{{' }}.ImageName{{ '}}' }}/{{ '{{' }}.Name{{ '}}' }}/{{ '{{' }}.ID{{ '}}' }}"
        volumes:
          - '/docker/mariadb/data:/var/lib/mysql'
          - '/docker/mariadb/custom.cnf:/etc/mysql/conf.d/custom.cnf:ro'

    - name: execute command in docker
      #shell: |
      #  docker exec db sh -l -c "cat /tmp/secret"
      shell: |
        docker exec db sh -l -c "ls"
      register: hello

    - debug: msg="{{ hello.stdout }}"

    #- name: Create db user
      #shell: |
      #  docker exec db sh -l -c "mysql -u root -p\"{{ db_root_password }}\" -h 127.0.0.1 -e \"CREATE USER 'testuser'@'%' IDENTIFIED BY 'testuser'\""
      #shell: |
      #  docker exec -it db mysql -u root -p\"{{ db_root_password }}\" -e \"CREATE USER 'testuser'@'%' IDENTIFIED BY 'testuser'\""
      
    # - name: Run a simple command (command)
    #   docker_container_exec:
    #     container: db
    #     #command: /bin/bash -c "ls -lah"
    #     command: /bin/bash -c "ls"
    #     chdir: /root
    #   register: result
    # - name: execute df command in hello-world Docker container
    #   community.docker.docker_container_exec:
    #     container: db
    #     command: df
    #   register: result

    # - name: Print stdout
    #   debug:
    #     var: result.stdout

    # - name: Get MariaDB dontainer details
    #   docker_container_info:
    #     name: 'db'
    #   register: result

    # - name: Print information about container
    #   debug:
    #     var: result.container
    #   when: result.exists
    #
    # PHPコンテナ作成
    #
    - name: Build php image and push
      docker_image:
        name: local/php
        build:
          path: './container/php/build'
        source: build

    - name: Create php container
      docker_container:
        name: php
        image: local/php
        recreate: yes
        state: started
        restart_policy: always
        ports: 9000:9000
        networks:
          - name: local-network
        log_driver: journald
        log_options:
          tag: "{{ '{{' }}.ImageName{{ '}}' }}/{{ '{{' }}.Name{{ '}}' }}/{{ '{{' }}.ID{{ '}}' }}"
        volumes:
          - '{{ www_document_root }}:/var/www/html:ro'   # www directory
          - '/docker/php/php.ini:/usr/local/etc/php/conf.d/my.ini:ro'
          - '/docker/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro'

    #
    # Nginxコンテナ作成
    #
    - name: Create build directory
      file:
        path: './container/nginx/build'
        state: directory
        #owner: "{{ ansible_env.SUDO_USER }}"
        #group: "{{ ansible_env.SUDO_USER }}"
        owner: "{{ ansible_ssh_user | default(ansible_env.SUDO_USER, true) | default(ansible_env.USER, true) | default(ansible_user_id) }}"
        group: "{{ ansible_ssh_user | default(ansible_env.SUDO_USER, true) | default(ansible_env.USER, true) | default(ansible_user_id) }}"
        mode: '0755'

    - name: Create Dockerfile
      template:
        src: './container/nginx/templates/Dockerfile.j2'
        dest: './container/nginx/build/Dockerfile' 
        #owner: "{{ ansible_env.SUDO_USER }}"
        #group: "{{ ansible_env.SUDO_USER }}"
        owner: "{{ ansible_ssh_user | default(ansible_env.SUDO_USER, true) | default(ansible_env.USER, true) | default(ansible_user_id) }}"
        group: "{{ ansible_ssh_user | default(ansible_env.SUDO_USER, true) | default(ansible_env.USER, true) | default(ansible_user_id) }}"
        mode: '0644'

    - name: Build nginx image and push
      docker_image:
        name: local/nginx
        build:
          path: './container/nginx/build'
        #tag: v1  # name tag option
        #push: yes  # push to DockerHub
        source: build

    - name: Create nginx container
      docker_container:
        name: nginx
        image: local/nginx
        recreate: yes
        state: started
        restart_policy: always
        ports:
          - 80:80
          - 443:443
        networks:
          - name: local-network
        log_driver: journald
        log_options:
          tag: "{{ '{{' }}.ImageName{{ '}}' }}/{{ '{{' }}.Name{{ '}}' }}/{{ '{{' }}.ID{{ '}}' }}"
        volumes:
          - '{{ www_document_root }}:/var/www/html:ro'   # www directory
          - '/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
          - '/docker/nginx/conf.d:/etc/nginx/conf.d:ro'
          - '/docker/nginx/sites-available:/etc/nginx/sites-available:ro'

    #
    # サンプルデータ作成
    #
    #docker exec some-mariadb sh -c 'exec mysqldump --all-databases -uroot -p"$MARIADB_ROOT_PASSWORD"' > /some/path/on/your/host/all-databases.sql
